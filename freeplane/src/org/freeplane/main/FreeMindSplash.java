/*************************************************************************** * FreeMindSplash, taken from GanttSplash.java - description ------------------- * begin : dec 2002 copyright : (C) 2002 by Thomas Alexandre email : * alexthomas(at)ganttproject.org ***************************************************************************//*************************************************************************** * * This program is free software; you can redistribute it and/or modify * it * under the terms of the GNU General Public License as published by * the Free * Software Foundation; either version 2 of the License, or * (at your option) * any later version. * * ***************************************************************************/package org.freeplane.main;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.Rectangle;import java.awt.RenderingHints;import java.awt.Toolkit;import java.util.Set;import javax.swing.ImageIcon;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JProgressBar;import javax.swing.JRootPane;import javax.swing.SwingUtilities;import org.freeplane.controller.Freeplane;/** * Class to put a splash before lunch the soft */public class FreeMindSplash extends JFrame implements IFreeMindSplash {	private class FeedBack implements IFeedBack {		private long mActualTimeStamp = System.currentTimeMillis();		private int mActualValue;		private JLabel mImageJLabel = null;		private long mTotalTime = 0;		public int getActualValue() {			return mActualValue;		}		public void increase(final String messageId) {			progress(getActualValue() + 1, messageId);		}		public void progress(final int act, final String messageId) {			final String progressString = Freeplane.getText(messageId);			mActualValue = act;			final long timeDifference = System.currentTimeMillis()			        - mActualTimeStamp;			mActualTimeStamp = System.currentTimeMillis();			mTotalTime += timeDifference;			SwingUtilities.invokeLater(new Runnable() {				public void run() {					mProgressBar.setValue(act);					final double percent = act * 1.0					        / mProgressBar.getMaximum();					mProgressBar.setString(progressString);					if (mImageJLabel != null) {						mImageJLabel.putClientProperty("progressString",						    progressString);						mImageJLabel.putClientProperty("progressPercent",						    new Double(percent));						mImageJLabel.repaint();					}				}			});		}		public void setImageJLabel(final JLabel imageJLabel) {			mImageJLabel = imageJLabel;		}		public void setMaximumValue(final int max) {			mProgressBar.setMaximum(max);			mProgressBar.setIndeterminate(false);		}	}	final private FeedBack feedBack;	final private ImageIcon mIcon;	final private JProgressBar mProgressBar;	public FreeMindSplash() {		super("FreeMind");		feedBack = new FeedBack();		mIcon = new ImageIcon(Freeplane.getController().getResourceController()		    .getResource("images/FreeMindWindowIcon.png"));		setIconImage(mIcon.getImage());		JFrame.setDefaultLookAndFeelDecorated(false);		setUndecorated(true);		getRootPane().setWindowDecorationStyle(JRootPane.NONE);		final ImageIcon splashImage = new ImageIcon(Freeplane.getController()		    .getResourceController().getResource("images/splash.JPG"));		final JLabel splashImageLabel = new JLabel(splashImage) {			private Integer mWidth = null;			final private Font progressFont = new Font("SansSerif", Font.PLAIN,			    10);			private Font versionTextFont = null;			{				final Set availableFontFamilyNames = Tools				    .getAvailableFontFamilyNames();				versionTextFont = availableFontFamilyNames				    .contains("Century Gothic") ? new Font("Century Gothic",				    Font.BOLD, 14) : new Font("Arial", Font.BOLD, 12);			}			@Override			public void paint(final Graphics g) {				super.paint(g);				final Graphics2D g2 = (Graphics2D) g;				g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,				    RenderingHints.VALUE_TEXT_ANTIALIAS_ON);				g2.setFont(versionTextFont);				final String freemindVersion = Freeplane.getController()				    .getFreemindVersion().toString();				if (mWidth == null) {					mWidth = new Integer(g2.getFontMetrics().stringWidth(					    freemindVersion));				}				final int yCoordinate = (int) (getSize().getHeight()) - 14;				final int xCoordinate = (int) (getSize().getWidth() - mWidth				    .intValue()) - 45;				g2.setColor(new Color(0x4d, 0x63, 0xb4));				g2.drawString(freemindVersion, xCoordinate, yCoordinate);				final String progressString = (String) getClientProperty("progressString");				if (progressString != null) {					final Double percent = (Double) getClientProperty("progressPercent");					final int xBase = 21;					final int yBase = yCoordinate + 7;					final int width = (int) getSize().getWidth() - 2 * xBase;					g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,					    RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);					g2.setFont(progressFont);					g2.setColor(new Color(0x80, 0x80, 0x80));					g2.drawString(progressString, xBase + 1, yBase - 4);					g2.setColor(new Color(0xf0, 0xf0, 0xf0));					g2.draw(new Rectangle(xBase + 2, yBase, width, 3));					g2.setColor(new Color(0xd0, 0xd0, 0xd0));					g2.draw(new Rectangle(xBase + 1, yBase + 1, width, 2));					g2.setColor(new Color(0xf4, 0xf4, 0xf4));					g2.fill(new Rectangle(xBase + 1, yBase + 1, width - 1, 2));					g2.setColor(new Color(0x4d, 0x63, 0xb4));					g2.fill(new Rectangle(xBase + 1, yBase + 1,					    (int) (width * percent.doubleValue()), 2));				}			}		};		feedBack.setImageJLabel(splashImageLabel);		getContentPane().add(splashImageLabel, BorderLayout.CENTER);		mProgressBar = new JProgressBar();		mProgressBar.setIndeterminate(true);		mProgressBar.setStringPainted(true);		pack();		final Dimension screenSize = Toolkit.getDefaultToolkit()		    .getScreenSize();		final Dimension labelSize = splashImageLabel.getPreferredSize();		setLocation(screenSize.width / 2 - (labelSize.width / 2),		    screenSize.height / 2 - (labelSize.height / 2));	}	public void close() {		setVisible(false);		dispose();	}	public IFeedBack getFeedBack() {		return feedBack;	}	public ImageIcon getWindowIcon() {		return mIcon;	}}