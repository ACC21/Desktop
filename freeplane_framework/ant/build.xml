<project name="freeplane" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property file="${workspace}/freeplane/viewer-resources/version.properties" />
	<property file="ant/ant.properties" />
	<property name="ver" value="${freeplane_version}" />
	<property name="root" value="." />
	<property name="build" value="${root}/build" />
	<property name="dist" value="${root}/dist" />

  <!-- Mac OS X -->
  <property name="mac-jarbundler" value = "${root}/mac-jarbundler"/>
	<property name="jarbundler.jar" value = "jarbundler-2.1.0.jar"/>
	<taskdef name="jarbundler"
               classpath="${mac-jarbundler}/${jarbundler.jar}"
               classname="net.sourceforge.jarbundler.JarBundler" />

	<target name="build">
		<property name="root" value="." />
		<property name="license" value="license.txt" />
		<property name="readme_src" value="readme.txt" />
		<property name="build.jars" value="${build}/jars" />
        <property name="build.plugins" value="${build}/plugins" />
        <property name="build.core" value="${build}/core" />
        <property name="build.resources" value="${build}/resources" />
        <property name="build.doc" value="${build}/doc" />
		<property name="script" value="${root}/script" />

		<ant antfile="ant/build.xml" target="osgi_dist" dir="${workspace}/freeplane" inheritall="false" />
		<ant antfile="ant/build.xml" dir="${workspace}/freeplane_plugin_help" inheritall="false" />
		<ant antfile="ant/build.xml" dir="${workspace}/freeplane_plugin_svg" inheritall="false" />
		<ant antfile="ant/build.xml" dir="${workspace}/freeplane_plugin_latex" inheritall="false" />
		<ant antfile="ant/build.xml" dir="${workspace}/freeplane_plugin_script" inheritall="false" />
		<ant antfile="ant/build.xml" dir="${workspace}/freeplane_plugin_bugreport" inheritall="false" />
		<mkdir dir="${build}" />
		<copy todir="${build}">
			<fileset dir="${script}" />
			<fileset file="${framework.jar}" />
            <fileset file="windows-launcher/freeplane.exe" />
		    <fileset file="windows-launcher/freeplaneConsole.exe" />
		</copy>
		<chmod file="${build}/freeplane.sh" perm="ugo+rx" />
		<mkdir dir="${build.core}/org.freeplane.core" />
		<copy todir="${build.core}/org.freeplane.core">
			<fileset dir="${workspace}/freeplane/dist/org.freeplane.core" />
		</copy>

		<!-- temporarily remove help plugin 
		
		<mkdir dir="${build.plugins}/org.freeplane.plugin.help" />
		<copy todir="${build.plugins}/org.freeplane.plugin.help">
			<fileset dir="${workspace}/freeplane_plugin_help/dist/org.freeplane.plugin.help"/>
		</copy>
-->
		<mkdir dir="${build.plugins}/org.freeplane.plugin.latex" />
		<copy todir="${build.plugins}/org.freeplane.plugin.latex">
			<fileset dir="${workspace}/freeplane_plugin_latex/dist/org.freeplane.plugin.latex" />
		</copy>
		<mkdir dir="${build.plugins}/org.freeplane.plugin.svg" />
		<copy todir="${build.plugins}/org.freeplane.plugin.svg">
			<fileset dir="${workspace}/freeplane_plugin_svg/dist/org.freeplane.plugin.svg" />
		</copy>
		<mkdir dir="${build.plugins}/org.freeplane.plugin.script" />
		<copy todir="${build.plugins}/org.freeplane.plugin.script">
			<fileset dir="${workspace}/freeplane_plugin_script/dist/org.freeplane.plugin.script" />
		</copy>
		<mkdir dir="${build.plugins}/org.freeplane.plugin.bugreport" />
		<copy todir="${build.plugins}/org.freeplane.plugin.bugreport">
			<fileset dir="${workspace}/freeplane_plugin_bugreport/dist/org.freeplane.plugin.bugreport" />
		</copy>

        <mkdir dir="${build.resources}" />
        <copy todir="${build.resources}">
            <fileset dir="${workspace}/freeplane/dist/resources" />
        </copy>
        <mkdir dir="${build.doc}" />
        <copy todir="${build.doc}">
            <fileset dir="${workspace}/freeplane/dist/doc" />
        </copy>

	</target>

	<target name="mkdistdir">
		<mkdir dir="${dist}" />
	</target>

	<target name="binzip" depends="build, mkdistdir">
		<zip destfile="${dist}/freeplane_bin-${ver}.zip" compress="true">
			<zipfileset dir="${build}" prefix="freeplane-${ver}">
				<exclude name="freeplane.sh"/>
			</zipfileset>
            <zipfileset file="${build}/freeplane.sh" filemode="775" prefix="freeplane-${ver}">
            </zipfileset>
			<zipfileset dir="${root}" prefix="freeplane-${ver}">
				<include name="${license}" />
			</zipfileset>
		</zip>
	</target>

	<target name="srczip" depends="mkdistdir">
		<tar destfile="${dist}/freeplane_src-${ver}.tar.gz" compression="gzip" longfile="gnu">
			<tarfileset prefix="freeplane-${ver}" dir="${workspace}" mode="664">
				<patternset id="freeplane.sources">
					<include name="freeplane/**" />
					<include name="freeplane_plugin*/**" />
					<include name="freeplane_framework/**" />
					<include name="JOrtho_0.4_freeplane/**" />
                    <exclude name=".*/**" />
                    <exclude name="**/backups/**" />
					<exclude name="bin/**" />
					<exclude name="build/**" />
					<exclude name="dist/**" />
					<exclude name="*/bin/**" />
					<exclude name="*/build/**" />
					<exclude name="*/dist/**" />
					<exclude name="JOrtho_0.4_freeplane/src/dictionary_*.ortho" />
				</patternset>
			</tarfileset>
			<tarfileset prefix="freeplane-${ver}" dir="${root}" mode="664">
				<include name="${license}" />
				<include name="${readme_src}" />
			</tarfileset>
		</tar>

		<tar destfile="${dist}/freeplane_srcpure-${ver}.tar.gz" compression="gzip" longfile="gnu">
			<tarfileset prefix="freeplane-${ver}" dir="${workspace}" mode="664">
				<patternset refid="freeplane.sources" />
				<exclude name="**/*.jar" />
			</tarfileset>
			<tarfileset prefix="freeplane-${ver}" dir="${root}" mode="664">
				<include name="${license}" />
				<include name="${readme_src}" />
			</tarfileset>
		</tar>
	</target>

	<target name="installer" depends="build, mkdistdir">
		<exec osfamily="windows" dir="${workspace}/freeplane_framework/windows-installer" executable="iscc.exe" failifexecutionfails="false" failonerror="true">
			<arg line="/Q Freeplane_without_Java.iss" />
		</exec>
	</target>
	
	<target name="portableinstaller" depends="build, mkdistdir">
		<property name="workingdir" value="${root}/temp/FreeplanePortable" />
		<delete quiet="true" includeemptydirs="false">
			<fileset dir="${workingdir}/.." />
		</delete>
        <mkdir dir="${workingdir}/App/Freeplane" />
        <copy todir="${workingdir}">
            <fileset dir="${root}/windows-portable" />
            <fileset file="windows-launcher/freeplanePortable.exe" />
        </copy>
        <mkdir dir="${workingdir}/Other/Source" />
        <copy tofile="${workingdir}/Other/Source/EULA.txt">
            <fileset file="${workspace}/freeplane/resources/license.txt" />
        </copy>
        <copy tofile="${workingdir}/App/AppInfo/appicon.ico">
            <fileset file="windows-launcher/Freeplane_app.ico" />
        </copy>
		
		<copy todir="${workingdir}/App/Freeplane">
			<fileset dir="${build}">
				<exclude name="*.exe" />
				<exclude name="*.bat" />
				<exclude name="*.sh" />
			</fileset>
		</copy>
		<dirname property="workingdir.path" file="${workingdir}/file" />
		<exec osfamily="windows" executable="PortableApps.comInstaller.exe" failifexecutionfails="false" failonerror="true">
			<arg line="${workingdir.path}" />
		</exec>
		<move todir="${dist}">
			<fileset dir="${workingdir}/..">
				<include name="*.paf.exe" />
			</fileset>
		</move>

		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${workingdir}/.." />
		</delete>

	</target>

  <!-- Mac OS X 
    This task just repackages the Unix files created during the "build" task
      During development we don't need "clean" and "build" to run first
      When done developing and testing we may want to restore this:
	<target name="macosxapp" depends="build, mkdistdir">
        or we may want to set this task to be invoked at the end of the "dist" task

  Remaining steps before release of this file:
    Move most comments to a Freeplane map, to document the development process
      Document how to create a Mac icon (.icms) from freeplane.svg:
        Open freeplane_framework/script/freeplane.svg in The Gimp image editor
          Actually using Gimpshop.app under Mac OS X Tiger
          Save as a 128x128 pixel .PNG file to mac-jarbundler/freeplane128x128.png
            Delete this intermediate file after creating freeplane.icns
        Open Apple XCode "Icon Composer.app" utility
          Drag 'n drop freeplane128x128.png into the 128-pixel thumbnail cell
          Save As mac-jarbundler/freeplane.icns
    Check any remaining TODO notes commented in this task
    Confirm that all property tags are in active use, and delete any which are obsolete
    Break up the long macdefines property into sub-properties?
    Create a depends clause for this ant task, per the note above
    Consider filling in more optional jarbuilder fields
      Check which fields are used by FreeMind
      PkgInfo file contains: APPL????
        !! TODO: Check for a JarBundler field corresponding to CFBundleSignature
      Update JVMVersion to 1.4+ (or should it be 1.5+ ?)
    Test restoring use of jarfileset inside our jarbundler task
      Would eliminate the separate ant <copy...> task
      Probably need to comment out the jar= clause which is disallowed with jarfileset
        Test whether specifying the OSGI main class is sufficient 
    Add Mac file associations
      Check the new icon: When minimized in the dock, still displays as previous icon
        Previously had adapted the logo from the Wiki for use as an icon
        Test rebooting to clear any icon cache
          Use "Safe Boot" to clear all caches if the old icon still persists
      Freeplane is not listed as an option for .mm files via Open With nor Get Info
        Check how FreeMind acomplishes its file associations
        Check JarBundler docs to confirm whether this is an option
    Get JavaApplicationStub compatible with Tiger, Leopard, Snow Leopard, Intel and PowerPC
      Our Tiger version is reported as Universal via "Get Info" but may fail under Leopard
      Then add to ${mac-jarbundler} directory and specify as a jarbundler argument
    Commit the changes made so far, after cleaning up
      Check again for any unneeded changes made to this branch, and reverse or delete them
        bzr status should reveal all changed / added files
          No need to perform an "ant clean"
            Output directories are masked by the .bzrignore file
          Keeping mac-jarbundler/buildOriginal.xml for now, also buildFeb04.xml
      Perform a full ant build (the default "dist") then backup online and update under:
        /Applications
        mac-jarbundler/
  -->
	<target name="macosxapp">

    <property name="macappfilename" value="Freeplane" />
    <property name="macappextension" value="app" />
    <property name="macappfullpath" value="${dist}/${macappfilename}.${macappextension}" />
    <property name="macosgidir" value="${build}" />
    <property name="macpluginsdir" value="plugins" />
    <property name="macdefines" value="-Dapple.laf.useScreenMenuBar=true -Dorg.knopflerfish.framework.bundlestorage=memory -Dorg.freeplane.globalresourcedir=./resources -Dorg.knopflerfish.gosg.jars=reference:file:./core/" />
    <property name="macxargs" value="-xargs ./props.xargs -xargs ./init.xargs" /> 
    <property name="macmemory" value="-Xmx512m" />
    <property name="macmainclass" value="org.knopflerfish.framework.Main" />
    <property name="macicon" value="${mac-jarbundler}/freeplane.icns" />

    <!-- Delete any existing Freeplane.app (it's a directory) -->
    <delete dir="${dist}/${macappfilename}.${macappextension}"/>

    <jarbundler dir="${dist}"
                name="${macappfilename}"
                mainclass="${macmainclass}"
                version="${ver}"
                vmoptions="${macmemory} ${macdefines}"
                arguments="${macxargs}"
                jar="${macosgidir}/framework.jar"
                icon="${macicon}"
                >
      <!-- For OSGI we want the entire build/ tree except WIndows-related stuff
             Commented out to allow testing jar=framework.jar
      <jarfileset dir="${macosgidir}">
        <exclude name="**/*.bat" />
        <exclude name="**/*.exe" />
      </jarfileset>
      -->
    </jarbundler>

    <!-- Patch the Info.plist file created by JarBundler, to work with Knopflerfish OSGI
           Courtesy of Volker who supplied the logic for this <replace> subtask
      Freeplane failed to start when double-clicking on Freeplane.app in Finder
        Fixed by editing Info.plist to set the WorkingDirectory to $JAVAROOT
          Found the idea for WorkingDirectory in a post on Knopflerfish's SF site:
            http://sourceforge.net/tracker/index.php?func=detail&aid=1651148&group_id=82798&atid=567241
            The downloadable example code had problems but inspired the solution
          Traced the issue in console.log: /Library/Logs/Console/502/console.log
            java.lang.IllegalArgumentException: Bad xargs URL ./props.xargs: 
              java.net.MalformedURLException: no protocol: ./props.xargs
            Similar error was reported when tested in iTerm using two tabs:
              Ran this ant task in the first iTerm tab
                cd /Users/Shared/Marc/bazaar-freeplane-repo/1_0_x_mac_jarbundler/freeplane_framework/ant
                Invoked this ant task using: ant macosxapp
              Invoked Freeplane in the second iTerm tab
                Changed to the Java dir inside Freeplane.app:
                  cd /Users/Shared/Marc/bazaar-freeplane-repo/1_0_x_mac_jarbundler/freeplane_framework/dist/Freeplane.app/Contents/Resources/Java
                    Must repeat this "cd" command after each use of ant in the other tab
                      Recovers the working directory after the build deletes and recreates it
                Then typed: ../../../../Freeplane.app/Contents/MacOS/JavaApplicationStub
          Confirmed that invoking JavaApplicationStub in iTerm now starts Freeplane
    -->
    <echo message="Adding WorkingDirectory to Info.plist" />
    <replace file="${macappfullpath}/Contents/Info.plist">
      <replacetoken><![CDATA[<string>org.knopflerfish.framework.Main</string>]]></replacetoken>
      <replacevalue><![CDATA[<string>org.knopflerfish.framework.Main</string>
<key>WorkingDirectory</key>
  <string>$JAVAROOT</string>]]></replacevalue>
    </replace>

    <!-- Copy the entire build/ tree except WIndows-related stuff
          Also exclude the OSGI framework.jar which is copied by the jarbundler task
          Doing this separately to allow specifying jar=framework.jar in the jarbundler task
            jarbundler allows either jar= or jarfileset but not both
            Copying after the jarbundler task which creates the Freeplane.app directory 
              JarBundler *might* erase the directory if it already exists
            !! TODO: Test restoring the jarfileset inside jarbundler
                       Comment out this copy task, and delete it if jarfileset works
    -->
		<copy todir="${macappfullpath}/Contents/Resources/Java">
			<fileset dir="${macosgidir}">
        <exclude name="**/*.bat" />
        <exclude name="**/*.exe" />
        <exclude name="**/framework.jar" />
      </fileset >
		</copy>

    <!-- Restore the eXecutable permission flags on the Unix script, for debug testing
           !! TODO: Trace why permissions are lost here to begin with,
                      and why chmod appears to fail silently
     -->
    <echo message="Setting eXecutable permissions on ${macappfullpath}/Contents/Resources/Java/freeplane.sh" />
		<chmod file="${macappfullpath}/Contents/Resources/Java/freeplane.sh" perm="ugo+rx" />
	</target>

	<target name="dist" depends="clean, binzip, srczip, installer, portableinstaller">
		<copy file="${workspace}/freeplane/doc/history_en.txt" todir="${dist}" />
	</target>

	<target name="clean">
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${build}" />
			<fileset dir="${dist}" />
		</delete>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane"/>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_help"/>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_svg"/>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_latex"/>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_script"/>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_bugreport"/>		
	</target>

</project>

