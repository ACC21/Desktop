<project name="freeplane" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property file="${workspace}/freeplane/viewer-resources/version.properties" />
	<property file="ant/ant.properties" />
	<property name="ver" value="${freeplane_version}" />
	<property name="root" value="." />
	<property name="build" value="${root}/build" />
    <property name="build.plugins" value="${build}/plugins" />
	<property name="dist" value="${root}/dist" />

    <!-- Mac OS X -->
	<condition property="isMacOs">
	      <os family="mac"/>
	</condition>

    <property name="mac-jarbundler" value = "${root}/mac-jarbundler"/>
	<property name="jarbundler.jar" value = "jarbundler-2.1.0.jar"/>
	<taskdef name="jarbundler"
               classpath="${mac-jarbundler}/${jarbundler.jar}"
               classname="net.sourceforge.jarbundler.JarBundler" />

	<target name="build">
		<property name="root" value="." />
		<property name="license" value="license.txt" />
		<property name="readme_src" value="readme.txt" />
		<property name="build.jars" value="${build}/jars" />
        <property name="build.core" value="${build}/core" />
        <property name="build.resources" value="${build}/resources" />
        <property name="build.doc" value="${build}/doc" />
		<property name="script" value="${root}/script" />

		<mkdir dir="${build}" />
		<copy todir="${build}">
			<fileset dir="${script}" />
			<fileset file="${framework.jar}" />
            <fileset file="windows-launcher/freeplane.exe" />
		    <fileset file="windows-launcher/freeplaneConsole.exe" />
		</copy>
		<chmod file="${build}/freeplane.sh" perm="ugo+rx" />
		<ant antfile="ant/build.xml" target="osgi_dist" dir="${workspace}/freeplane" inheritall="false" />
		<mkdir dir="${build.core}/org.freeplane.core" />
		<copy todir="${build.core}/org.freeplane.core">
			<fileset dir="${workspace}/freeplane/dist/org.freeplane.core" />
		</copy>

		<!-- temporarily remove help plugin 
		<ant antfile="ant/build.xml" dir="${workspace}/freeplane_plugin_help" inheritall="false" />
		
		<mkdir dir="${build.plugins}/org.freeplane.plugin.help" />
		<copy todir="${build.plugins}/org.freeplane.plugin.help">
			<fileset dir="${workspace}/freeplane_plugin_help/dist/org.freeplane.plugin.help"/>
		</copy>
-->
		<ant antfile="ant/build.xml" dir="${workspace}/freeplane_plugin_latex" inheritall="false" />
		<mkdir dir="${build.plugins}/org.freeplane.plugin.latex" />
		<copy todir="${build.plugins}/org.freeplane.plugin.latex">
			<fileset dir="${workspace}/freeplane_plugin_latex/dist/org.freeplane.plugin.latex" />
		</copy>
		<ant antfile="ant/build.xml" dir="${workspace}/freeplane_plugin_svg" inheritall="false" />
		<mkdir dir="${build.plugins}/org.freeplane.plugin.svg" />
		<copy todir="${build.plugins}/org.freeplane.plugin.svg">
			<fileset dir="${workspace}/freeplane_plugin_svg/dist/org.freeplane.plugin.svg" />
		</copy>
		<ant antfile="ant/build.xml" dir="${workspace}/freeplane_plugin_script" inheritall="false" /> 
		<mkdir dir="${build.plugins}/org.freeplane.plugin.script" />
		<copy todir="${build.plugins}/org.freeplane.plugin.script">
			<fileset dir="${workspace}/freeplane_plugin_script/dist/org.freeplane.plugin.script" />
		</copy>
		<ant antfile="ant/build.xml" dir="${workspace}/freeplane_plugin_bugreport" inheritall="false" />
		<mkdir dir="${build.plugins}/org.freeplane.plugin.bugreport" />
		<copy todir="${build.plugins}/org.freeplane.plugin.bugreport">
			<fileset dir="${workspace}/freeplane_plugin_bugreport/dist/org.freeplane.plugin.bugreport" />
		</copy>

        <mkdir dir="${build.resources}" />
        <copy todir="${build.resources}">
            <fileset dir="${workspace}/freeplane/dist/resources" />
        </copy>
        <mkdir dir="${build.doc}" />
        <copy todir="${build.doc}">
            <fileset dir="${workspace}/freeplane/dist/doc" />
        </copy>

	</target>

	<target name="mkdistdir">
		<mkdir dir="${dist}" />
	</target>

	<target name="binzip" depends="build, mkdistdir">
		<zip destfile="${dist}/freeplane_bin-${ver}.zip" compress="true">
			<zipfileset dir="${build}" prefix="freeplane-${ver}">
				<exclude name="freeplane.sh"/>
			</zipfileset>
            <zipfileset file="${build}/freeplane.sh" filemode="775" prefix="freeplane-${ver}">
            </zipfileset>
			<zipfileset dir="${root}" prefix="freeplane-${ver}">
				<include name="${license}" />
			</zipfileset>
		</zip>
	</target>

	<target name="srczip" depends="mkdistdir">
		<tar destfile="${dist}/freeplane_src-${ver}.tar.gz" compression="gzip" longfile="gnu">
			<tarfileset prefix="freeplane-${ver}" dir="${workspace}" mode="664">
				<patternset id="freeplane.sources">
					<include name="freeplane/**" />
					<include name="freeplane_plugin*/**" />
					<include name="freeplane_framework/**" />
					<include name="JOrtho_0.4_freeplane/**" />
                    <exclude name=".*/**" />
                    <exclude name="**/backups/**" />
					<exclude name="bin/**" />
					<exclude name="build/**" />
					<exclude name="dist/**" />
					<exclude name="*/bin/**" />
					<exclude name="*/build/**" />
					<exclude name="*/dist/**" />
					<exclude name="JOrtho_0.4_freeplane/src/dictionary_*.ortho" />
				</patternset>
			</tarfileset>
			<tarfileset prefix="freeplane-${ver}" dir="${root}" mode="664">
				<include name="${license}" />
				<include name="${readme_src}" />
			</tarfileset>
		</tar>

		<tar destfile="${dist}/freeplane_srcpure-${ver}.tar.gz" compression="gzip" longfile="gnu">
			<tarfileset prefix="freeplane-${ver}" dir="${workspace}" mode="664">
				<patternset refid="freeplane.sources" />
				<exclude name="**/*.jar" />
			</tarfileset>
			<tarfileset prefix="freeplane-${ver}" dir="${root}" mode="664">
				<include name="${license}" />
				<include name="${readme_src}" />
			</tarfileset>
		</tar>
	</target>

	<target name="installer" depends="build, mkdistdir">
		<exec osfamily="windows" dir="${workspace}/freeplane_framework/windows-installer" executable="iscc.exe" failifexecutionfails="false" failonerror="true">
			<arg line="/Q Freeplane_without_Java.iss" />
		</exec>
	</target>
	
	<target name="portableinstaller" depends="build, mkdistdir">
		<property name="workingdir" value="${root}/temp/FreeplanePortable" />
		<delete quiet="true" includeemptydirs="false">
			<fileset dir="${workingdir}/.." />
		</delete>
        <mkdir dir="${workingdir}/App/Freeplane" />
        <copy todir="${workingdir}">
            <fileset dir="${root}/windows-portable" />
            <fileset file="windows-launcher/freeplanePortable.exe" />
        </copy>
        <mkdir dir="${workingdir}/Other/Source" />
        <copy tofile="${workingdir}/Other/Source/EULA.txt">
            <fileset file="${workspace}/freeplane/resources/license.txt" />
        </copy>
        <copy tofile="${workingdir}/App/AppInfo/appicon.ico">
            <fileset file="windows-launcher/Freeplane_app.ico" />
        </copy>
		
		<copy todir="${workingdir}/App/Freeplane">
			<fileset dir="${build}">
				<exclude name="*.exe" />
				<exclude name="*.bat" />
				<exclude name="*.sh" />
			</fileset>
		</copy>
		<dirname property="workingdir.path" file="${workingdir}/file" />
		<exec osfamily="windows" executable="PortableApps.comInstaller.exe" failifexecutionfails="false" failonerror="true">
			<arg line="${workingdir.path}" />
		</exec>
		<move todir="${dist}">
			<fileset dir="${workingdir}/..">
				<include name="*.paf.exe" />
			</fileset>
		</move>

		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${workingdir}/.." />
		</delete>

	</target>

  <!-- Mac OS X 
    This task just repackages the Unix files created during the "build" task
      During development we don't need "clean" and "build" to run first
      When done developing and testing we may want to restore this:
	<target name="macosxapp" depends="build, mkdistdir">
        or we may want to set this task to be invoked at the end of the "dist" task

  Remaining steps before release of this file:
    Move most comments to a Freeplane map, to document the development process
      Document how to create a Mac icon (.icms) from freeplane.svg:
        Open freeplane_framework/script/freeplane.svg in The Gimp image editor
          Actually using Gimpshop.app under Mac OS X Tiger
          Save as a 128x128 pixel .PNG file to mac-jarbundler/freeplane128x128.png
            Delete this intermediate file after creating freeplane.icns
        Open Apple XCode "Icon Composer.app" utility
          Drag 'n drop freeplane128x128.png into the 128-pixel thumbnail cell
          Save As mac-jarbundler/freeplane.icns
    Check any remaining TODO notes commented in this task
    Confirm that all property tags are in active use, and delete any which are obsolete
    Break up the long macdefines and macparams properties into multiple (sub-)properties
    Create a depends clause for this ant task, per the note above
    Test restoring use of jarfileset inside our jarbundler task
      Would eliminate the separate ant <copy...> task
      Probably need to comment out the jar= clause which is disallowed with jarfileset
        Test whether specifying the OSGI main class is sufficient 
    Trace and fix Freeplane exiting immediately from the application menu Freeplane > Quit
      Any unsaved changes are discarded
      Should invoke the same logic as File > Quit (displays a File Was Modified, Save? dialog)
        This works correctly when closing the window via its red Close widget
      FreeMind correctly displays a File Was Modified, Save? dialog for FreeMind > Quit
        !! TODO: Check FreeMind source for handling the Application > Quit event
    !! TODO: JavaApplicationStub: Find Apple's license and either add it to comments here,
             or include the license in ${mac-jarbundler} directory
      Renamed to FreeplaneJavaApplicationStub for better visibility with 'top' command
    Commit the changes made so far, after cleaning up
      Check again for any unneeded changes made to this branch, and reverse or delete them
        Use bzr status to reveal all changed / added files
          !! TODO: Check whether we can easily add all .DS_Store files to .bzrignore
      Perform a full ant build (the default "dist") then backup online and update under:
        /Applications
        mac-jarbundler/
    Trace and fix Mac file associations
      All the same symptoms occur under Leopard where we've never before run Freeplane
        The old logo icon must somehow be incorporated into Freeplane.app ??
      Check the icon used when Freeplane is minimized in the dock
        Still displays as our previous icon, adapted from the Wiki logo
          Had used this in an AppleScript implementation of Freeplane.app
            This had its own applet.icns and is now renamed to FreeplaneAppleScript.app
        Had been using the program icon as the document icon
          Ask on developer-list for an alternate .svg file to use
          Use a larger icon, as the banner is too short
          Might using the same icon be causing a problem?
            Tested Banner.svg attachment received from Predrag, converted to .icns
              Also changed capitalization in the parameter name, from iconFile to iconfile
              Did not help, still got all the same symptoms
                Also dist/Freeplane.app does not always display the correct icon in Finder
                  Sometimes looks like an AppleScript icon??
                  The correct icon displays when logged in as another user (root)
                    When this happens again, test logging out and in again as Jo
                      Also test creating a desktop shortcut to the dist directory
                      Delete the .DS_Store file via iTerm, then re-open via new desktop shortcut
      Consider building under Leopard or under Linux
      Adapt the four parameters as passed in freeplane.sh
        Documents still fail to open when Freeplane.app is invoked via Open With...
          FreeMind is able to open documents invoked via Open With...
            !! TODO: Check FreeMind source for how it opens documents via Open With...
        Our old AppleScript Freeplane.app only invoked freeplane.sh:
          do shell script "cd /Applications/freeplane; /bin/bash -c ./freeplane.sh"
        Check the syntax for accessing command-line parameters in drag 'n drop apps
          Nothing found via Google nor in JarBundler docs
        Commented out for now, as bash syntax "$1" is probably incorrect in this context
        !! TODO: Check FreeMind startup parameters
      This is mostly working now, after filling in more of the optional JarBundler fields
        !! TODO: Check whether JVMVersion should be 1.5+ instead of 1.4+
        Testing signature="FP"
          This is the JarBundler field corresponding to CFBundleSignature
          This fixes the PkgInfo file: previously was "APPL????", now "APPLFP"
          FreeMind uses "FM" even though the field is documented to require 4 characters
            Consider testing our own 4 characters *after* Freeplane opens the files like FreeMind
        Freeplane is started up, or activated if running, but it fails to open the .mm file
  -->
	<target name="macosxapp">

    <property name="macappfilename" value="Freeplane" />
    <property name="macappextension" value="app" />
    <property name="macappfullpath" value="${dist}/${macappfilename}.${macappextension}" />
    <property name="macosgidir" value="${build}" />
    <property name="macpluginsdir" value="plugins" />
    <property name="macxargs" value="-xargs ./props.xargs -xargs ./init.xargs" /> 
    <property name="macmemory" value="-Xmx512m" />
    <!-- Disabling "command-line" parameters because the "$1" syntax is probably incorrect here: 
    <property name="macparams" value="-Dorg.freeplane.param1=$1 -Dorg.freeplane.param2=$2 -Dorg.freeplane.param3=$3 -Dorg.freeplane.param4=$4" />
    --> 
    <property name="macparams" value="" />
    <property name="macdefines" value="-Dapple.laf.useScreenMenuBar=true -Dorg.knopflerfish.framework.bundlestorage=memory -Dorg.freeplane.globalresourcedir=./resources -Dorg.knopflerfish.gosg.jars=reference:file:./core/" />
    <property name="macmainclass" value="org.knopflerfish.framework.Main" />
    <property name="macicon" value="${mac-jarbundler}/freeplane.icns" />
    <property name="macdocumenticon" value="${mac-jarbundler}/Banner.icns" />
    <property name="macstubfile" value="${mac-jarbundler}/FreeplaneJavaApplicationStub" />
    <property name="macinfostring" value="Freeplane ${ver}" />
    <property name="macshortname" value="Freeplane" />
    <property name="macbundleid" value="org.freeplane.core" />
    <property name="macjvmversion" value="1.5+" />
    <property name="macsignature" value="FP" />


    <!-- Delete any existing Freeplane.app (it's a directory) -->
    <delete dir="${dist}/${macappfilename}.${macappextension}"/>

    <jarbundler dir="${dist}"
                name="${macappfilename}"
                mainclass="${macmainclass}"
                version="${ver}"
                infostring="${macinfostring}"
                shortname="${macshortname}"
                bundleid="${macbundleid}"
                jvmversion="${macjvmversion}"
                vmoptions="${macmemory} ${macparams} ${macdefines}"
                arguments="${macxargs}"
                jar="${macosgidir}/framework.jar"
                icon="${macicon}"
                stubfile="${macstubfile}"
                signature="${macsignature}"
                >
      <!-- For OSGI we want the entire build/ tree except WIndows-related stuff
             Commented out to allow testing jar=framework.jar
      <jarfileset dir="${macosgidir}">
        <exclude name="**/*.bat" />
        <exclude name="**/*.exe" />
      </jarfileset>
      -->

      <!-- Commenting out icon for file associations until this is debugged
                    iconfile="${macdocumenticon}"
      -->
      <documenttype name="Mindmap"
                    extensions="mm" 
                    ostypes="MM"
                    role="Editor"/>
    </jarbundler>

    <!-- Patch the Info.plist file created by JarBundler, to work with Knopflerfish OSGI
           Courtesy of Volker who supplied the logic for this <replace> subtask
      Freeplane failed to start when double-clicking on Freeplane.app in Finder
        Fixed by editing Info.plist to set the WorkingDirectory to $JAVAROOT
          Found the idea for WorkingDirectory in a post on Knopflerfish's SF site:
            http://sourceforge.net/tracker/index.php?func=detail&aid=1651148&group_id=82798&atid=567241
            The downloadable example code had problems but inspired the solution
          Traced the issue in console.log: /Library/Logs/Console/502/console.log
            java.lang.IllegalArgumentException: Bad xargs URL ./props.xargs: 
              java.net.MalformedURLException: no protocol: ./props.xargs
            Similar error was reported when tested in iTerm using two tabs:
              Ran this ant task in the first iTerm tab
                cd /Users/Shared/Marc/bazaar-freeplane-repo/1_0_x_mac_jarbundler/freeplane_framework/ant
                Invoked this ant task using: ant macosxapp
              Invoked Freeplane in the second iTerm tab
                Changed to the Java dir inside Freeplane.app:
                  cd /Users/Shared/Marc/bazaar-freeplane-repo/1_0_x_mac_jarbundler/freeplane_framework/dist/Freeplane.app/Contents/Resources/Java
                    Must repeat this "cd" command after each use of ant in the other tab
                      Recovers the working directory after the build deletes and recreates it
                Then typed: ../../../../Freeplane.app/Contents/MacOS/JavaApplicationStub
          Confirmed that invoking JavaApplicationStub in iTerm now starts Freeplane
    -->
    <echo message="Adding WorkingDirectory to Info.plist" />
    <replace file="${macappfullpath}/Contents/Info.plist">
      <replacetoken><![CDATA[<string>org.knopflerfish.framework.Main</string>]]></replacetoken>
      <replacevalue><![CDATA[<string>org.knopflerfish.framework.Main</string>
<key>WorkingDirectory</key>
  <string>$JAVAROOT</string>]]></replacevalue>
    </replace>

    <!-- Copy the entire build/ tree except WIndows-related stuff
          Also exclude the OSGI framework.jar which is copied by the jarbundler task
          Doing this separately to allow specifying jar=framework.jar in the jarbundler task
            jarbundler allows either jar= or jarfileset but not both
            Copying after the jarbundler task which creates the Freeplane.app directory 
              JarBundler may erase the directory if it already exists
                This is documented in their change log
            !! TODO: Test restoring the jarfileset inside jarbundler
                       Comment out this copy task, and delete it if jarfileset works
    -->
		<property name="macjavafullpath" value="${macappfullpath}/Contents/Resources/Java"/>
		<copy todir="${macjavafullpath}">
			<fileset dir="${macosgidir}">
        <exclude name="**/*.bat" />
        <exclude name="**/*.exe" />
        <exclude name="**/framework.jar" />
      </fileset >
		</copy>

		<ant antfile="ant/build.xml" dir="${workspace}/freeplane_plugin_mac" inheritall="false"/> 
		<mkdir dir="${macjavafullpath}/plugins/org.freeplane.plugin.mac"/>
		<copy todir="${macjavafullpath}/plugins/org.freeplane.plugin.mac">
			<fileset dir="${workspace}/freeplane_plugin_mac/dist/org.freeplane.plugin.mac" />
		</copy>
			

    <!-- Restore the eXecutable permission flags on the Unix script -->
    <echo message="Setting eXecutable permissions on ${macappfullpath}/Contents/Resources/Java/freeplane.sh" />
		<chmod file="${macappfullpath}/Contents/Resources/Java/freeplane.sh" perm="ugo+rx" />
	</target>

	<target name="dist" depends="clean, binzip, srczip, installer, portableinstaller, macosxapp">
		<copy file="${workspace}/freeplane/doc/history_en.txt" todir="${dist}" />
	</target>

	<target name="clean">
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${build}" />
			<fileset dir="${dist}" />
		</delete>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane"/>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_help"/>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_svg"/>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_latex"/>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_script"/>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_mac"/>
		  <ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_bugreport"/>		
	</target>

</project>

