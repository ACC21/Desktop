Index: src/main/java/jsyntaxpane/actions/ActionUtils.java
===================================================================
--- src/main/java/jsyntaxpane/actions/ActionUtils.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/ActionUtils.java	(working copy)
@@ -126,21 +126,6 @@
     }
 
     /**
-     * Returns the Frame that contains this component or null if the component
-     * is not within a Window or the containing window is not a frame
-     * @param comp
-     * @return
-     */
-    public static Frame getFrameFor(Component comp) {
-        Window w = SwingUtilities.getWindowAncestor(comp);
-        if (w != null && w instanceof Frame) {
-            Frame frame = (Frame) w;
-            return frame;
-        }
-        return null;
-    }
-
-    /**
      * Returns the the Token at pos as a String
      * @param doc
      * @param pos
Index: src/main/java/jsyntaxpane/actions/DocumentSearchData.java
===================================================================
--- src/main/java/jsyntaxpane/actions/DocumentSearchData.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/DocumentSearchData.java	(working copy)
@@ -14,12 +14,16 @@
 package jsyntaxpane.actions;
 
 import java.awt.Component;
+import java.awt.Dialog;
+import java.awt.Frame;
+import java.awt.Window;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import javax.swing.JOptionPane;
 import javax.swing.SwingUtilities;
 import javax.swing.text.JTextComponent;
 import jsyntaxpane.SyntaxDocument;
+import jsyntaxpane.actions.gui.GotoLineDialog;
 import jsyntaxpane.actions.gui.ReplaceDialog;
 
 /**
@@ -159,7 +163,7 @@
      */
     public void showDialog(JTextComponent target) {
         if (dlg == null) {
-            dlg = new ReplaceDialog(target, this);
+        	dlg = ReplaceDialog.createDialog(target, this);
         }
         dlg.setVisible(true);
     }
Index: src/main/java/jsyntaxpane/actions/ReflectCompletionAction.java
===================================================================
--- src/main/java/jsyntaxpane/actions/ReflectCompletionAction.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/ReflectCompletionAction.java	(working copy)
@@ -13,9 +13,16 @@
  */
 package jsyntaxpane.actions;
 
+import jsyntaxpane.actions.gui.GotoLineDialog;
 import jsyntaxpane.actions.gui.ReflectCompletionDialog;
+
+import java.awt.Dialog;
+import java.awt.Frame;
+import java.awt.Window;
 import java.awt.event.ActionEvent;
 import java.util.Map;
+
+import javax.swing.SwingUtilities;
 import javax.swing.text.JTextComponent;
 import jsyntaxpane.SyntaxDocument;
 
@@ -38,7 +45,7 @@
     public void actionPerformed(JTextComponent target, SyntaxDocument sDoc,
             int dot, ActionEvent e) {
         if (dlg == null) {
-            dlg = new ReflectCompletionDialog(target);
+        	dlg = ReflectCompletionDialog.createDialog(target);
         }
         dlg.displayFor(target);
     }
Index: src/main/java/jsyntaxpane/actions/gui/GotoLineDialog.java
===================================================================
--- src/main/java/jsyntaxpane/actions/gui/GotoLineDialog.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/gui/GotoLineDialog.java	(working copy)
@@ -13,8 +13,13 @@
  */
 package jsyntaxpane.actions.gui;
 
+import java.awt.Dialog;
+import java.awt.Frame;
+import java.awt.Window;
+
 import jsyntaxpane.actions.*;
 import javax.swing.JOptionPane;
+import javax.swing.SwingUtilities;
 import javax.swing.text.JTextComponent;
 import jsyntaxpane.util.SwingUtils;
 
@@ -27,13 +32,37 @@
     private static final String PROPERTY_KEY = "GOTOLINE_DIALOG";
     private JTextComponent text;
 
+    private static GotoLineDialog createDialog(JTextComponent target) {
+		final GotoLineDialog dlg;
+		Window w = SwingUtilities.getWindowAncestor(target);
+		if (w instanceof Frame)
+			dlg = new GotoLineDialog((Frame) w, target);
+		else if (w instanceof Dialog)
+			dlg = new GotoLineDialog((Dialog) w, target);
+		else 
+			dlg = new GotoLineDialog((Frame) null, target);
+		return dlg;
+    }
+    /** 
+     * Creates new form GotoLineDialog
+     * @param text
+     */
+    private GotoLineDialog(Frame frame, JTextComponent text) {
+        super(frame, false);
+        init(text);
+    }
+
     /** 
      * Creates new form GotoLineDialog
      * @param text
      */
-    private GotoLineDialog(JTextComponent text) {
-        super(ActionUtils.getFrameFor(text), false);
-        initComponents();
+    private GotoLineDialog(Dialog dialog, JTextComponent text) {
+        super(dialog, false);
+        init(text);
+    }
+
+    private void init(JTextComponent text) {
+	    initComponents();
         this.text = text;
         setLocationRelativeTo(text.getRootPane());
         getRootPane().setDefaultButton(jBtnOk);
@@ -116,8 +145,9 @@
     public static void showForEditor(JTextComponent text) {
         GotoLineDialog dlg = null;
         if ((text == null) || (text.getDocument().getProperty(PROPERTY_KEY) == null)) {
-            dlg = new GotoLineDialog(text);
-        } else {
+				dlg = GotoLineDialog.createDialog(text);
+		}
+		else {
             dlg = (GotoLineDialog) text.getDocument().getProperty(PROPERTY_KEY);
         }
         dlg.jCmbLineNumbers.requestFocusInWindow();
Index: src/main/java/jsyntaxpane/actions/gui/ReflectCompletionDialog.java
===================================================================
--- src/main/java/jsyntaxpane/actions/gui/ReflectCompletionDialog.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/gui/ReflectCompletionDialog.java	(working copy)
@@ -13,7 +13,9 @@
  */
 package jsyntaxpane.actions.gui;
 
+import java.awt.Dialog;
 import java.awt.Font;
+import java.awt.Frame;
 import java.awt.Point;
 import java.awt.Rectangle;
 import java.awt.Window;
@@ -56,14 +58,38 @@
     public List<Member> items;
     private final JTextComponent target;
 
+	public static ReflectCompletionDialog createDialog(JTextComponent target) {
+		final ReflectCompletionDialog dlg;
+		Window w = SwingUtilities.getWindowAncestor(target);
+		if (w instanceof Frame)
+			dlg = new ReflectCompletionDialog((Frame) w, target);
+		else if (w instanceof Dialog)
+			dlg = new ReflectCompletionDialog((Dialog) w, target);
+		else 
+			dlg = new ReflectCompletionDialog((Frame) null, target);
+		return dlg;
+    }
     /**
      * Creates new form ReflectCompletionDialog
      * @param target Text component for this dialog
      */
-    public ReflectCompletionDialog(JTextComponent target) {
-        super(ActionUtils.getFrameFor(target), true);
-        initComponents();
+    public ReflectCompletionDialog(Frame frame, JTextComponent target) {
+        super(frame, true);
         this.target = target;
+        init(target);
+    }
+    /**
+     * Creates new form ReflectCompletionDialog
+     * @param target Text component for this dialog
+     */
+    public ReflectCompletionDialog(Dialog dialog, JTextComponent target) {
+        super(dialog, true);
+        this.target = target;
+        init(target);
+    }
+
+	private void init(JTextComponent target) {
+	    initComponents();
         jTxtItem.getDocument().addDocumentListener(new DocumentListener() {
 
 //            @Override
Index: src/main/java/jsyntaxpane/actions/gui/ReplaceDialog.java
===================================================================
--- src/main/java/jsyntaxpane/actions/gui/ReplaceDialog.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/gui/ReplaceDialog.java	(working copy)
@@ -16,10 +16,14 @@
 import jsyntaxpane.actions.*;
 import jsyntaxpane.components.Markers;
 import java.awt.Color;
+import java.awt.Dialog;
+import java.awt.Frame;
 import java.awt.HeadlessException;
+import java.awt.Window;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 import javax.swing.JOptionPane;
+import javax.swing.SwingUtilities;
 import javax.swing.event.CaretEvent;
 import javax.swing.event.CaretListener;
 import javax.swing.text.JTextComponent;
@@ -38,15 +42,41 @@
     private DocumentSearchData dsd;
     private static Markers.SimpleMarker SEARCH_MARKER = new Markers.SimpleMarker(Color.YELLOW);
 
+	public static ReplaceDialog createDialog(JTextComponent target, DocumentSearchData documentSearchData) {
+		final ReplaceDialog dlg;
+		Window w = SwingUtilities.getWindowAncestor(target);
+		if (w instanceof Frame)
+			dlg = new ReplaceDialog((Frame) w, target, documentSearchData);
+		else if (w instanceof Dialog)
+			dlg = new ReplaceDialog((Dialog) w, target, documentSearchData);
+		else 
+			dlg = new ReplaceDialog((Frame) null, target, documentSearchData);
+		return dlg;
+	}
+    /**
+     * Creates new form FindDialog
+     * @param text
+     * @param dsd DocumentSerachData
+     */
+    public ReplaceDialog(Frame frame, JTextComponent text,
+            DocumentSearchData dsd) {
+        super(frame, false);
+        init(text, dsd);
+    }
+
+
     /**
      * Creates new form FindDialog
      * @param text
      * @param dsd DocumentSerachData
      */
-    public ReplaceDialog(JTextComponent text,
+    public ReplaceDialog(Dialog dialog, JTextComponent text,
             DocumentSearchData dsd) {
-        super(ActionUtils.getFrameFor(text), false);
-        initComponents();
+        super(dialog, false);
+        init(text, dsd);
+    }
+	private void init(JTextComponent text, DocumentSearchData dsd) {
+	    initComponents();
         textComponent = text;
         this.dsd = dsd;
         textComponent.addCaretListener(this);
