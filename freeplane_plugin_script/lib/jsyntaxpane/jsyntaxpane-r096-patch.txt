Index: src/main/java/jsyntaxpane/actions/ActionUtils.java
===================================================================
--- src/main/java/jsyntaxpane/actions/ActionUtils.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/ActionUtils.java	(working copy)
@@ -150,21 +150,6 @@
 	}
 
 	/**
-	 * Returns the Frame that contains this component or null if the component
-	 * is not within a Window or the containing window is not a frame
-	 * @param comp
-	 * @return
-	 */
-	public static Frame getFrameFor(Component comp) {
-		Window w = SwingUtilities.getWindowAncestor(comp);
-		if (w != null && w instanceof Frame) {
-			Frame frame = (Frame) w;
-			return frame;
-		}
-		return null;
-	}
-
-	/**
 	 * Returns the the Token at pos as a String
 	 * @param doc
 	 * @param pos
Index: src/main/java/jsyntaxpane/actions/ComboCompletionAction.java
===================================================================
--- src/main/java/jsyntaxpane/actions/ComboCompletionAction.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/ComboCompletionAction.java	(working copy)
@@ -53,7 +53,7 @@
             target.select(token.start, token.end());
         }
         if (dlg == null) {
-            dlg = new ComboCompletionDialog(target);
+            dlg = ComboCompletionDialog.createDialog(target);
         }
         dlg.displayFor(abbrev, items);
     }
Index: src/main/java/jsyntaxpane/actions/CompleteWordAction.java
===================================================================
--- src/main/java/jsyntaxpane/actions/CompleteWordAction.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/CompleteWordAction.java	(working copy)
@@ -69,7 +69,7 @@
             return;
         }
         if (dlg == null) {
-            dlg = new ComboCompletionDialog(target);
+            dlg = ComboCompletionDialog.createDialog(target);
         }
         dlg.displayFor(cw, matches);
     }
Index: src/main/java/jsyntaxpane/actions/DocumentSearchData.java
===================================================================
--- src/main/java/jsyntaxpane/actions/DocumentSearchData.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/DocumentSearchData.java	(working copy)
@@ -251,14 +251,14 @@
 	 */
 	public void showReplaceDialog(JTextComponent target) {
 		if (replaceDlg == null) {
-			replaceDlg = new ReplaceDialog(target, this);
+			replaceDlg = ReplaceDialog.createDialog(target, this);
 		}
 		replaceDlg.setVisible(true);
 	}
 
 	public void showQuickFindDialog(JTextComponent target) {
 		if (quickFindDlg == null) {
-			quickFindDlg = new QuickFindDialog(target, this);
+			quickFindDlg = QuickFindDialog.createDialog(target, this);
 		}
 		quickFindDlg.showFor(target);
 	}
Index: src/main/java/jsyntaxpane/actions/ShowAbbsAction.java
===================================================================
--- src/main/java/jsyntaxpane/actions/ShowAbbsAction.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/ShowAbbsAction.java	(working copy)
@@ -45,7 +45,7 @@
 				JOptionPane.showMessageDialog(target,
 					java.util.ResourceBundle.getBundle("jsyntaxpane/Bundle").getString("ShowAbbsAction.NoAbbsForType"));
 			} else {
-				new ShowAbbsDialog((JEditorPane) target, abbs);
+				ShowAbbsDialog.createDialog((JEditorPane) target, abbs);
 			}
 		}
 	}
Index: src/main/java/jsyntaxpane/actions/gui/ComboCompletionDialog.java
===================================================================
--- src/main/java/jsyntaxpane/actions/gui/ComboCompletionDialog.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/gui/ComboCompletionDialog.java	(working copy)
@@ -13,7 +13,9 @@
  */
 package jsyntaxpane.actions.gui;
 
+import java.awt.Dialog;
 import java.awt.Font;
+import java.awt.Frame;
 import java.awt.Point;
 import java.awt.Rectangle;
 import java.awt.Window;
@@ -49,13 +51,37 @@
     public String escapeChars = ";(= \t\n\r";
     public List<String> items;
 
+	public static ComboCompletionDialog createDialog(JTextComponent target) {
+		final ComboCompletionDialog dlg;
+		Window w = SwingUtilities.getWindowAncestor(target);
+		if (w instanceof Frame)
+			dlg = new ComboCompletionDialog((Frame) w, target);
+		else if (w instanceof Dialog)
+			dlg = new ComboCompletionDialog((Dialog) w, target);
+		else 
+			dlg = new ComboCompletionDialog((Frame) null, target);
+		return dlg;
+    }
     /**
      * Creates new form ComboCompletionDialog
      * @param target
      */
-    public ComboCompletionDialog(JTextComponent target) {
-        super(ActionUtils.getFrameFor(target), true);
-        initComponents();
+    public ComboCompletionDialog(Frame frame, JTextComponent target) {
+        super(frame, true);
+        init(target);
+    }
+
+    /**
+     * Creates new form ComboCompletionDialog
+     * @param target
+     */
+    public ComboCompletionDialog(Dialog dialog, JTextComponent target) {
+        super(dialog, true);
+        init(target);
+    }
+
+	private void init(JTextComponent target) {
+	    initComponents();
         jTxtItem.getDocument().addDocumentListener(new DocumentListener() {
 
             @Override
Index: src/main/java/jsyntaxpane/actions/gui/GotoLineDialog.java
===================================================================
--- src/main/java/jsyntaxpane/actions/gui/GotoLineDialog.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/gui/GotoLineDialog.java	(working copy)
@@ -13,9 +13,13 @@
  */
 package jsyntaxpane.actions.gui;
 
+import java.awt.Dialog;
+import java.awt.Frame;
+import java.awt.Window;
 import java.lang.ref.WeakReference;
 import jsyntaxpane.actions.*;
 import javax.swing.JOptionPane;
+import javax.swing.SwingUtilities;
 import javax.swing.text.JTextComponent;
 import jsyntaxpane.util.SwingUtils;
 
@@ -29,12 +33,39 @@
     private static final String PROPERTY_KEY = "GOTOLINE_DIALOG";
     private WeakReference<JTextComponent> text;
 
+    private static GotoLineDialog createDialog(JTextComponent target) {
+		final GotoLineDialog dlg;
+		Window w = SwingUtilities.getWindowAncestor(target);
+		if (w instanceof Frame)
+			dlg = new GotoLineDialog((Frame) w, target);
+		else if (w instanceof Dialog)
+			dlg = new GotoLineDialog((Dialog) w, target);
+		else 
+			dlg = new GotoLineDialog((Frame) null, target);
+		return dlg;
+    }
+    /** 
+     * Creates new form GotoLineDialog
+     * @param text
+     */
+    private GotoLineDialog(Frame frame, JTextComponent text) {
+        super(frame, false);
+        init(text);
+    }
+
+    /** 
+     * Creates new form GotoLineDialog
+     * @param text
+     */
+    private GotoLineDialog(Dialog dialog, JTextComponent text) {
+        super(dialog, false);
+        init(text);
+    }
     /** 
      * Creates new form GotoLineDialog
      * @param text
      */
-    private GotoLineDialog(JTextComponent text) {
-        super(ActionUtils.getFrameFor(text), false);
+    private void init(JTextComponent text) {
         initComponents();
         this.text = new WeakReference<JTextComponent>(text);
         setLocationRelativeTo(text.getRootPane());
@@ -137,7 +168,7 @@
     public static void showForEditor(JTextComponent text) {
         GotoLineDialog dlg = null;
         if (text.getDocument().getProperty(PROPERTY_KEY) == null) {
-            dlg = new GotoLineDialog(text);
+            dlg = GotoLineDialog.createDialog(text);
         } else {
             dlg = (GotoLineDialog) text.getDocument().getProperty(PROPERTY_KEY);
         }
Index: src/main/java/jsyntaxpane/actions/gui/QuickFindDialog.java
===================================================================
--- src/main/java/jsyntaxpane/actions/gui/QuickFindDialog.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/gui/QuickFindDialog.java	(working copy)
@@ -15,9 +15,12 @@
 
 import java.awt.Color;
 import java.awt.Container;
+import java.awt.Dialog;
 import java.awt.Dimension;
+import java.awt.Frame;
 import java.awt.Point;
 import java.awt.Rectangle;
+import java.awt.Window;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.WindowAdapter;
@@ -56,18 +59,45 @@
 	 */
 	private boolean escaped = false;
 
-	/**
-	 * Creates new form QuickFindDialog
-	 *
-	 * @param target
-	 * @param data search data
-	 */
-	public QuickFindDialog(final JTextComponent target, DocumentSearchData data) {
-		super(ActionUtils.getFrameFor(target), false);
-		initComponents();
+	public static QuickFindDialog createDialog(JTextComponent target, DocumentSearchData documentSearchData) {
+		final QuickFindDialog dlg;
+		Window w = SwingUtilities.getWindowAncestor(target);
+		if (w instanceof Frame)
+			dlg = new QuickFindDialog((Frame) w, target, documentSearchData);
+		else if (w instanceof Dialog)
+			dlg = new QuickFindDialog((Dialog) w, target, documentSearchData);
+		else 
+			dlg = new QuickFindDialog((Frame) null, target, documentSearchData);
+		return dlg;
+	}
+    /**
+     * Creates new form FindDialog
+     * @param text
+     * @param dsd DocumentSerachData
+     */
+    public QuickFindDialog(Frame frame, JTextComponent text,
+            DocumentSearchData dsd) {
+        super(frame, false);
+        init(dsd);
+    }
+
+
+    /**
+     * Creates new form FindDialog
+     * @param text
+     * @param dsd DocumentSerachData
+     */
+    public QuickFindDialog(Dialog dialog, JTextComponent text,
+            DocumentSearchData dsd) {
+        super(dialog, false);
+        init(dsd);
+    }
+
+	private void init(DocumentSearchData data) {
+	    initComponents();
 		SwingUtils.addEscapeListener(this);
 		dsd = new WeakReference<DocumentSearchData>(data);
-	}
+    }
 
 	public void showFor(final JTextComponent target) {
 		oldCaretPosition = target.getCaretPosition();
Index: src/main/java/jsyntaxpane/actions/gui/ReplaceDialog.java
===================================================================
--- src/main/java/jsyntaxpane/actions/gui/ReplaceDialog.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/gui/ReplaceDialog.java	(working copy)
@@ -16,9 +16,13 @@
 import jsyntaxpane.actions.*;
 import jsyntaxpane.components.Markers;
 import java.awt.Color;
+import java.awt.Dialog;
+import java.awt.Frame;
 import java.awt.HeadlessException;
+import java.awt.Window;
 import java.util.regex.PatternSyntaxException;
 import javax.swing.JOptionPane;
+import javax.swing.SwingUtilities;
 import javax.swing.event.CaretEvent;
 import javax.swing.event.CaretListener;
 import javax.swing.text.JTextComponent;
@@ -38,15 +42,42 @@
 	private DocumentSearchData dsd;
 	private static Markers.SimpleMarker SEARCH_MARKER = new Markers.SimpleMarker(Color.YELLOW);
 
-	/**
-	 * Creates new form FindDialog
-	 * @param text
-	 * @param dsd DocumentSerachData
-	 */
-	public ReplaceDialog(JTextComponent text,
-		DocumentSearchData dsd) {
-		super(ActionUtils.getFrameFor(text), false);
-		initComponents();
+	public static ReplaceDialog createDialog(JTextComponent target, DocumentSearchData documentSearchData) {
+		final ReplaceDialog dlg;
+		Window w = SwingUtilities.getWindowAncestor(target);
+		if (w instanceof Frame)
+			dlg = new ReplaceDialog((Frame) w, target, documentSearchData);
+		else if (w instanceof Dialog)
+			dlg = new ReplaceDialog((Dialog) w, target, documentSearchData);
+		else 
+			dlg = new ReplaceDialog((Frame) null, target, documentSearchData);
+		return dlg;
+	}
+    /**
+     * Creates new form FindDialog
+     * @param text
+     * @param dsd DocumentSerachData
+     */
+    public ReplaceDialog(Frame frame, JTextComponent text,
+            DocumentSearchData dsd) {
+        super(frame, false);
+        init(text, dsd);
+    }
+
+
+    /**
+     * Creates new form FindDialog
+     * @param text
+     * @param dsd DocumentSerachData
+     */
+    public ReplaceDialog(Dialog dialog, JTextComponent text,
+            DocumentSearchData dsd) {
+        super(dialog, false);
+        init(text, dsd);
+    }
+
+	private void init(JTextComponent text, DocumentSearchData dsd) {
+	    initComponents();
 		textComponent = text;
 		this.dsd = dsd;
 		textComponent.addCaretListener(this);
@@ -54,7 +85,7 @@
 		getRootPane().setDefaultButton(jBtnNext);
 		SwingUtils.addEscapeListener(this);
 		jBtnReplaceAll.setEnabled(text.isEditable() && text.isEnabled());
-	}
+    }
 
 	/**
 	 * updates the highlights in the document when it is updated.
Index: src/main/java/jsyntaxpane/actions/gui/ShowAbbsDialog.java
===================================================================
--- src/main/java/jsyntaxpane/actions/gui/ShowAbbsDialog.java	(revision 145)
+++ src/main/java/jsyntaxpane/actions/gui/ShowAbbsDialog.java	(working copy)
@@ -14,9 +14,15 @@
 
 package jsyntaxpane.actions.gui;
 
+import java.awt.Dialog;
+import java.awt.Frame;
+import java.awt.Window;
 import java.util.Arrays;
 import java.util.Map;
 import javax.swing.JEditorPane;
+import javax.swing.SwingUtilities;
+import javax.swing.text.JTextComponent;
+
 import jsyntaxpane.actions.ActionUtils;
 import jsyntaxpane.util.SwingUtils;
 
@@ -28,14 +34,34 @@
 public class ShowAbbsDialog 
 	extends javax.swing.JDialog implements EscapeListener {
 
+	public static ShowAbbsDialog createDialog(JEditorPane parent, Map<String, String> abbs) {
+		final ShowAbbsDialog dlg;
+		Window w = SwingUtilities.getWindowAncestor(parent);
+		if (w instanceof Frame)
+			dlg = new ShowAbbsDialog((Frame) w, parent, abbs);
+		else if (w instanceof Dialog)
+			dlg = new ShowAbbsDialog((Dialog) w, parent, abbs);
+		else 
+			dlg = new ShowAbbsDialog((Frame) null, parent, abbs);
+		return dlg;
+    }
 	/**
 	 * Creates new form ShowAbbsDialog
 	 * @param parent
 	 * @param abbs
 	 */
-	public ShowAbbsDialog(JEditorPane parent, Map<String, String> abbs) {
-		super(ActionUtils.getFrameFor(parent), true);
-		initComponents();
+	public ShowAbbsDialog(Frame frame, JEditorPane parent, Map<String, String> abbs) {
+		super(frame, true);
+		init(parent, abbs);
+	}
+
+	public ShowAbbsDialog(Dialog dialog, JEditorPane parent, Map<String, String> abbs) {
+		super(dialog, true);
+		init(parent, abbs);
+	}
+
+	private void init(JEditorPane parent, Map<String, String> abbs) {
+	    initComponents();
 		Object[] abbsList = abbs.keySet().toArray();
 		Arrays.sort(abbsList);
 		jLstAbbs.setListData(abbsList);
@@ -44,7 +70,7 @@
 		jLstAbbs.setSelectedIndex(0);
 		SwingUtils.addEscapeListener(this);
 		setVisible(true);
-	}
+    }
 
 	/**
 	 * This method is called from within the constructor to
